From 477fd2e8f068fec661152b848caf2134883d8b8f Mon Sep 17 00:00:00 2001
From: gameltb <gamegccltb@gmail.com>
Date: Tue, 1 Oct 2019 13:25:44 +0800
Subject: [PATCH 1/3] SELinux : for no SELinux

Change-Id: Ib351f49770db9c821604eee65e9ca8c22d4bec59
---
 init/log.cpp              | 2 ++
 init/property_service.cpp | 8 ++++----
 init/service.cpp          | 5 ++++-
 init/subcontext.cpp       | 2 +-
 init/util.cpp             | 4 ++--
 5 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/init/log.cpp b/init/log.cpp
index 6198fc25f..f52fed31c 100644
--- a/init/log.cpp
+++ b/init/log.cpp
@@ -54,6 +54,7 @@ static void InitAborter(const char* abort_message) {
 
 void InitKernelLogging(char* argv[]) {
     // Make stdin/stdout/stderr all point to /dev/null.
+    /*
     int fd = open("/sys/fs/selinux/null", O_RDWR);
     if (fd == -1) {
         int saved_errno = errno;
@@ -65,6 +66,7 @@ void InitKernelLogging(char* argv[]) {
     dup2(fd, 1);
     dup2(fd, 2);
     if (fd > 2) close(fd);
+    */
 
     android::base::InitLogging(argv, &android::base::KernelLogger, InitAborter);
 }
diff --git a/init/property_service.cpp b/init/property_service.cpp
index 4172ba754..58fc7bbd9 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -318,10 +318,10 @@ class SocketConnection {
     const ucred& cred() { return cred_; }
 
     std::string source_context() const {
-        char* source_context = nullptr;
-        getpeercon(socket_, &source_context);
-        std::string result = source_context;
-        freecon(source_context);
+        //char* source_context = "";
+        //getpeercon(socket_, &source_context);
+        std::string result = "";
+        //freecon(source_context);
         return result;
     }
 
diff --git a/init/service.cpp b/init/service.cpp
index 37d3a8807..fe7b958bb 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -77,6 +77,9 @@ static Result<std::string> ComputeContextFromExecutable(const std::string& servi
     }
     std::unique_ptr<char> mycon(raw_con);
 
+    std::string my_context = mycon.get();
+    return my_context;
+
     if (getfilecon(service_path.c_str(), &raw_filecon) == -1) {
         return Error() << "Could not get file context";
     }
@@ -311,7 +314,7 @@ void Service::SetProcessAttributes() {
     }
     if (!seclabel_.empty()) {
         if (setexeccon(seclabel_.c_str()) < 0) {
-            PLOG(FATAL) << "cannot setexeccon('" << seclabel_ << "') for " << name_;
+            PLOG(INFO) << "ignored : cannot setexeccon('" << seclabel_ << "') for " << name_;
         }
     }
     if (priority_ != 0) {
diff --git a/init/subcontext.cpp b/init/subcontext.cpp
index fdb46415d..faf3c8d08 100644
--- a/init/subcontext.cpp
+++ b/init/subcontext.cpp
@@ -245,7 +245,7 @@ void Subcontext::Fork() {
         }
 
         if (setexeccon(context_.c_str()) < 0) {
-            PLOG(FATAL) << "Could not set execcon for '" << context_ << "'";
+            PLOG(INFO) << "ignored : Could not set execcon for '" << context_ << "'";
         }
 
         auto init_path = GetExecutablePath();
diff --git a/init/util.cpp b/init/util.cpp
index 4455b2eb1..d2ee0402d 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -89,8 +89,8 @@ int CreateSocket(const char* name, int type, bool passcred, mode_t perm, uid_t u
                  const char* socketcon) {
     if (socketcon) {
         if (setsockcreatecon(socketcon) == -1) {
-            PLOG(ERROR) << "setsockcreatecon(\"" << socketcon << "\") failed";
-            return -1;
+            PLOG(INFO) << "ignored : setsockcreatecon(\"" << socketcon << "\") failed";
+            //return -1;
         }
     }
 
-- 
2.23.0

